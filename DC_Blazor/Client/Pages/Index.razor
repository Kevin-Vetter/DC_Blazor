@page "/"
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>Testing</PageTitle>

<h1>SignalR Test</h1>

@if (!IsConnected)
{
    <div class="input-group">
        <input>
        <button class="btn btn-primary form-control-append" @onclick="Connect">Connect</button>
    </div>
}
else
{
    <textarea style="width:100%; height:500px;" disabled>
        @messages
        </textarea>
    <div class="input-group">
        <input @bind-value="message"
           @bind-value:event="oninput"
           @onkeyup="HandleInput"
           class="form-control">
        <button class="btn btn-primary form-group-append" @onclick="Send">
            SEND
        </button>
    </div>
}






@code {
    private HubConnection? hubConnection;
    private string messages = String.Empty;
    private string username = String.Empty;
    private string message = String.Empty;

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager
            .ToAbsoluteUri("/dchub"))
            .Build();

        hubConnection.On<string>("ReceiveMsg", (mgs) =>
        {
            var msgs = $"user: {mgs}";
            messages += msgs + "\n";
            StateHasChanged();
        });
        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("Sendmsg", message);
            message = string.Empty;
        }
    }

    private async Task HandleInput(KeyboardEventArgs args){
        if (args.Key.Equals("Enter"))
        {
            await Send();
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}